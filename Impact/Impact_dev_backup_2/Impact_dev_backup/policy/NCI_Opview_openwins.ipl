/********************************************************* {COPYRIGHT-TOP-RM} ***
* Licensed Materials - Property of IBM
* "Restricted Materials of IBM"
*
* 5724-S43
* (C) Copyright IBM Corp. 2009
*
* US Government Users Restricted Rights - Use, duplication, or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************* {COPYRIGHT-END-RM} **/
/*##############################################################
Functions
##############################################################*/

function separateRecurringWindowsByType(windows, TYPE2, TYPE3, TYPE4)
{
	log(2, "separating " + length(windows) + " windows by type");

    TYPE2={};
    TYPE3={};
    TYPE4={};
    n = 0;
    while (n < length(windows))
    {
        if(windows[n].wintype == 2)
            {
                TYPE2 = TYPE2 + windows[n];
            }

        elseif (windows[n].wintype == 3)
            {
                TYPE3 = TYPE3 + windows[n];
            }

        elseif (windows[n].wintype == 4)
            {
                TYPE4 = TYPE4 + windows[n];
            }

        n = n + 1;
    }


    log(3, "there are " + length(TYPE2) + " windows of type 2");
    log(3, "there are " + length(TYPE3) + " windows of type 3");
    log(3, "there are " + length(TYPE3) + " windows of type 3");

}







function deleteWindow(mwid)
{
    MWM_Properties.getProperties(props);
    log(3, "properties: " + props);

    if (props.clearFlag == TRUE)
    {
        //OK get the window in question
        sql = "select filterstat, mwid from mm_windows where mwid = " + mwid;
        deleteMe = DirectSQL('ReportsHSQLDB', sql, false);
        log(3, "filter for window to be deleted is " + deleteMe[0].filterstat);
        log(3, "mwid for window to be deleted is " + deleteMe[0].mwid);


        if (length(deleteMe) > 0) //yep it's still there.  checking for overlapping windows
        {
            UTC = getdate();

            //check active one-time windows
            MWM.getActiveOneTime(UTC, windows);

            //get active recurring windows
            MWM.getTZs(tzArray);
            n = 0;
            while (n < length(tzArray))
            {
                MWM.getActiveRecurring(tzArray[n], UTC, rWindows);
                windows = windows + rWindows;
                n = n + 1;
            }
            log(3, "found a total of " + length(windows) + " open windows");

            if (length(windows) > 0) //do any open windows have the same filterstat?
            {
                m = 0;
                while(m < length(windows))
                {
                    log(3, "filter for this open window is " + windows[m].filterstat);
                    log(3, "mwid for this open window is " + windows[m].mwid);

                    if( (windows[m].filterstat == deleteMe[0].filterstat) and (windows[m].mwid !=deleteMe[0].mwid)) //there is some overlap
                    {
                        overlap = TRUE;
                    }
                    m = m + 1; //continue while loop
                }
            }

            if (overlap == NULL) //no overlapping windows
            {
                //clear flag in OMNIbus
                cleanFilter = Replace(deleteMe[0].filterstat,"\"","'");
                omniSql = "update alerts.status set SuppressEscl = 0 where SuppressEscl = 6 and (" + cleanFilter + ")";
                directsql("defaultobjectserver", omniSql, false);

                //delete the window
                log(3, "deleting the window");
                BatchDelete('mm_windows', "mwid=" + mwid, null);
            }
            if (overlap == TRUE) //overlapping windows
            {
                log(3, "there is at least one overlapping active window so I'm not changing OMNIbus");
                log(3, "deleting the window");
                BatchDelete('mm_windows', "mwid=" + mwid, null);
            }
        }
    }

    else
    {
        log(3, "deleting the window");
        BatchDelete('mm_windows', "mwid=" + mwid, null);

    }
/*
//for testing...
//check for window
log("confirming window " + mwid + " is gone");
wSql = "select mwid from mm_windows where mwid = " + mwid;
w = directsql("ReportsHSQLDB", wSql, false);
log(w);
*/
}





function shineDoWiM(dowim, r)
{

    r = substring(dowim, 1, length(dowim) -1);
    r = replace(r, "\|", ", ", 100);
    r = replace(r, "first", "1st ");
    r = replace(r, "second", "2nd ");
    r = replace(r, "third", "3rd  ");
    r = replace(r, "fourth", "4th ");
    r = replace(r, "fifth", "5th ");
    log(3, "dowim is......\n" + dowim);

    log(3, "return is..............\n" + r);
}




function shineDoM(dom, r)
{

    r = substring(dom, 1, length(dom) - 1);
    r = replace(r, "\|", ", ", 100);
    log(3, "dom is...........\n" + dom);
    log(3, "return is.................\n" + r);

}



function shineDoW(dow, r)
{

    r = replace(dow, "\|", ", ", 100);
    log(3, "dow is...............\n" + dow);
    log(3, "return is...............\n" + r);    

}



function shineFilter(filter, r)
{

    r = strip(filter, "(");
    r = strip (r, ")");
    r = replace(r, '"', "'", 100);
    log(3, "filter is....................\n" + filter);
    log(3, "return is..................\n" + r);
    
}



/*##############################################################*/





//code for handling deletes
If(@mwid != NULL)
{ 
    Opview_openwins.deleteWindow(@mwid);
}




//get current epoch time
UTC = GetDate();
log(3, "Current epoch time is " + UTC);



/*##############################################################
One Time Windows
##############################################################*/

//Get Active OneTime Windows
MWM.getActiveOneTime(UTC, windows);

log(3, "Found " + length(windows) + " active one time windows");


if(length(windows) > 0)
{ 
   //create HTML
    n = 0;
    while (n < length(windows))
    {

        //get a display value for the TZ
        Opview_onetwins.getTZDisplayValue (windows[n].timezone, displayTZ);

        //get display value for filterstat
        Opview_openwins.shineFilter(windows[n].filterstat, displayFilterstat);

        //build html
        htmltext1 = "<table><tr><th>Suppression Filter</th><th>Start Time</th><th>End Time</th><th>Time Zone</th><th>Delete</th></tr>";
        htmltext1 = htmltext1 + "<tr><td>" + displayFilterstat + "</td>";
        htmltext1 = htmltext1 + "<td>" + windows[n].ot_starttime + "</td><td>" + windows[n].ot_endtime + "</td>";
        htmltext1 = htmltext1 + "<td>" + displayTZ + "</td>";
        htmltext1 = htmltext1 + "<td align='center'><a href='NCICLUSTER-openwins.html?mwid=" + windows[n].mwid + "'><img src='../assets/installed/mwms/delete.jpg' ";
        htmltext1 = htmltext1 + "border=0 alt='Delete Window'/></a></td></tr>";

        n = n + 1;

    }

}

else
{
    htmltext1 = "<table><tr><th>Suppression Filter</th><th>Start Time</th><th>End Time</th><th>Time Zone</th><th>Delete</th></tr>";
    htmltext1 = "<center>There are currently no active One Time windows.</center>";
}

htmltext1 = htmltext1 + "</table>";



/*##############################################################
Recurring Windows
##############################################################*/

//what time zones do we have to deal with, as each will require a different query
MWM.getTZs(tzArray);

//get ALL of the active recurring windows and separate them out later.

windows = {};
n = 0;
while (n < length(tzArray))
{
    MWM.getActiveRecurring(tzArray[n], UTC, wins);

    if(length(wins) > 0)
    {
        windows = windows + wins;
    }
    n = n + 1;
}
log(3, "Found " + length(windows) + " active recurring windows");



if (length(windows) > 0)
{
    separateRecurringWindowsByType(windows, type2, type3, type4);
}





///////////////////////////////////////// wintype = 2 (DoW)
htmltext2 = "<table><tr><th>Suppression Filter</th><th>Day of Week</th><th>Start Time</th><th>End Time</th><th>Time Zone</th><th>Delete</th></tr>";

n = 0;
while (n < length(type2))
{
    //get a display value for the TZ
    Opview_onetwins.getTZDisplayValue (type2[n].timezone, displayTZ);

    //get display value for filterstat
    Opview_openwins.shineFilter(type2[n].filterstat, displayFilterstat);

    //get display value for dow
    Opview_openwins.shineDoW(type2[n].daysofweek, displayDoW);

    htmltext2 = htmltext2 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoW + "</td>";
    htmltext2 = htmltext2 + "<td>" + type2[n].r_starttime + "</td><td>" + type2[n].r_endtime + "</td>";
    htmltext2 = htmltext2 + "<td>" + displayTZ + "</td>";
    htmltext2 = htmltext2 + "<td align='center'><a href='NCICLUSTER-openwins.html?mwid=" + type2[n].mwid + "'><img src='../assets/installed/mwms/delete.jpg' ";
    htmltext2 = htmltext2 + "border=0 alt='Delete Window'/></a></td></tr>";
    n = n + 1;
}

if( length(type2) == 0)
{
    htmltext2 = "<center>There are currently no active windows of this type.</center>";
}


htmltext2 = htmltext2 + "</table>";






/////////////////////////////////////////////////////// wintype = 3 (DoM)
htmltext3 = "<table><tr><th>Suppression Filter</th><th>Day of Month</th><th>Start Time</th><th>End Time</th><th>Time Zone</th><th>Delete</th></tr>";
n = 0;
while (n < length(type3))
{
    //get a display value for the TZ
    Opview_onetwins.getTZDisplayValue (type3[n].timezone, displayTZ);

    //get display value for filterstat
    Opview_openwins.shineFilter(type3[n].filterstat, displayFilterstat);

    //get display value for dom
    Opview_openwins.shineDoM(type3[n].daysofmonth, displayDoM);


    htmltext3 = htmltext3 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoM + "</td>";
    htmltext3 = htmltext3 + "<td>" + type3[n].r_starttime + "</td><td>" + type3[n].r_endtime + "</td>";
    htmltext3 = htmltext3 + "<td>" + displayTZ + "</td>";
    htmltext3 = htmltext3 + "<td align='center'><a href='NCICLUSTER-openwins.html?mwid=" + type3[n].mwid + "'><img src='../assets/installed/mwms/delete.jpg' ";
    htmltext3 = htmltext3 + "border=0 alt='Delete Window'/></a></td></tr>";

    n = n + 1;
}

if( length(type3) == 0)
{
    htmltext3 = "<center>There are currently no active windows of this type.</center>";

}


htmltext3 = htmltext3 + "</table>";





///////////////////////////////////////////////////// wintype = 4 (DoM)
htmltext4 = "<table><tr><th>Suppression Filter</th><th>Weekday of Month</th><th>Start Time</th><th>End Time</th><th>Time Zone</th><th>Delete</th></tr>";
n = 0;
while (n < length(type4))
{
    //get a display value for the TZ
    Opview_onetwins.getTZDisplayValue (type4[n].timezone, displayTZ);

    //get display value for filterstat
    Opview_openwins.shineFilter(type4[n].filterstat, displayFilterstat);

    //get display value for dowim
    Opview_openwins.shineDoWiM(type4[n].nweekdayofmonth, displayDoWiM);

    htmltext4 = htmltext4 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoWiM + "</td>";
    htmltext4 = htmltext4 + "<td>" + type4[n].r_starttime + "</td><td>" + type4[n].r_endtime + "</td>";
    htmltext4 = htmltext4 + "<td>" + displayTZ + "</td>";
    htmltext4 = htmltext4 + "<td align='center'><a href='NCICLUSTER-openwins.html?mwid=" + type4[n].mwid + "'><img src='../assets/installed/mwms/delete.jpg' ";
    htmltext4 = htmltext4 + "border=0 alt='Delete Window'/></a></td></tr>";

    n = n + 1;
}

if( length(type4) == 0)
{
    htmltext4 = "<center>There are currently no active windows of this type.</center>";

}


htmltext4 = htmltext4 + "</table>";



