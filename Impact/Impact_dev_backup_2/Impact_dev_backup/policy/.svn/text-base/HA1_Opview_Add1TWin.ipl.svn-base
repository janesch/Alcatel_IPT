/********************************************************* {COPYRIGHT-TOP-RM} ***
* Licensed Materials - Property of IBM
* "Restricted Materials of IBM"
*
* 5724-S43
* (C) Copyright IBM Corp. 2009
*
* US Government Users Restricted Rights - Use, duplication, or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************* {COPYRIGHT-END-RM} **/
/*############################

logging initial values

#############################*/
log(3, "\n\n\n\n\n");

log(3, "current epoch time is " + getdate());
log(3, "VALUES FROM BROWSER");
Log(3, "Node: " + @t1);
Log(3, "AlertGroup: " + @t2);
Log(3, "AlertKey: " + @t3);
Log(3, "Location: " + @t4);
Log(3, "window start: " + @onetstart);
//2009-08-10 09:38:05

Log(3, "window end: " + @onetend);
//2009-08-13 09:38:11

log(3, "timezone is: " + @timezone);
//CST

//log(3, "dst is: " + @dst); // 0 (not checked) or 1 (checked)

//onetstart = @onetstart;
/*
dstString = "";
if (@dst = 1)
{
	dstString = "Daylight Savings";
}
*/



/*##################################

tweaking times

#################################*/


/////////////////FUNCTIONS
function getCalendarInt(calendarField, calendarFieldInt, calendar)
{
    log(3, "determining CalendarInt for string " + calendarField);

    calendarFieldInt = getFieldValue(null, calendar, calendarField);
    //working example
    //DOWInt = getFieldValue(null, calendar, "DAY_OF_WEEK");

    log(3, "Int for calendar field " + calendarField + " " + calendarFieldInt);

}


function setCalendarField(calendarField, calendarFieldValue, calendar)
{

    log(3, "setting value of field " + calendarField + " to " + calendarFieldValue);

    getCalendarInt(calendarField, calendarFieldInt, calendar);
    javacall(null, calendar, "set", {calendarFieldInt, calendarFieldValue});

    //confirmation
    newValue = javacall(null, calendar, "get", {calendarFieldInt});
    log(3, "value of " + calendarField + " changed to " + newValue);

}



function setCalendarFields(fieldsArray, valuesArray, calendar)
{

    log(3, "setting value of fields " + fieldsArray + " to " + valuesArray);

    n = 0;
    while(n < length(fieldsArray))
    {
        setCalendarField(fieldsArray[n], valuesArray[n], calendar);

/*        log(3, "after setting " + fieldsArray[n] + "......................................");
        xCalendar = javacall(null, calendar, "toString", {});
        log(3, "calendar is " + xCalendar);
*/

        n = n + 1;    
    }

}


function toInt(stringArray, intArray)
{
    intArray = {};

    n = 0;
    while (n < length(stringArray))
    {
        intArray = intArray + int(stringArray[n]);

        n = n + 1;
    }

}


function breakUpTimeString(timeString, valuesArray)
{
    //example: 2009-08-10 09:38:05
    split1 = split(timeString, " ");

    yyyymmdd = split(split1[0], "-");
    hhmmss = split(split1[1], ":");

    toInt(yyyymmdd, yyyymmddINT);
    toInt(hhmmss, hhmmssINT);

    //JANUARY IS 0 so MM = MM - 1
    yyyymmddINT[1] = yyyymmddINT[1] - 1;


    valuesArray = yyyymmddINT + hhmmssINT;
    log(3, "date values broken into array are " + valuesArray);


}



function getEpoch(timeString, calendar, epoch)
{

    //fields for calendar
    calendarFields = {"YEAR", "MONTH", "DAY_OF_MONTH", "HOUR_OF_DAY", "MINUTE", "SECOND"};

    breakUpTimeString(timeString, timeValuesArray);

    setCalendarFields(calendarFields, timeValuesArray, calendar);

    epoch = javacall(null, calendar, "getTimeInMillis", {});
    epoch = int(epoch / 1000);

    log(3, "epoch time for " + timeString + " is " + epoch);


}




function jMadrox (windowObj, boo)
{
    //checks for duplicate windows
    log(2, "checking for duplicate windows");
    log(3, windowObj);

    boo = false;

    if(windowObj.wintype = 1)
    {
        longFilter = "wintype=1";
        longFilter = longFilter + " and filterstat= '" + windowObj.filterstat + "'";
        longFilter = longFilter + " and eot_starttime =" +  windowObj.eot_starttime;
        longFilter = longFilter + " and eot_endtime = " + windowObj.eot_endtime;
        longFilter = longFilter + " and timezone = '" + windowObj.timezone + "'";
        dup = getbyfilter("mm_windows", longFilter, false);

        if (length (dup) > 0)
        {
            boo = true;
        }

    }


    if(windowObj.wintype = 2)
    {
        longFilter = "wintype=2";
        longFilter = longFilter + " and filterstat= '" + windowObj.filterstat + "'";
        longFilter = longFilter + " and r_starttime = '" +  windowObj.r_starttime + "'";
        longFilter = longFilter + " and r_endtime =  '" + windowObj.r_endtime + "'";
        longFilter = longFilter + " and timezone = '" + windowObj.timezone + "'";
        longFilter = longFilter + " and daysofweek = '" + windowObj.daysofweek + "'";
        dup = getbyfilter("mm_windows", longFilter, false);

        if (length (dup) > 0)
        {
            boo = true;

        }

    }


    if(windowObj.wintype = 3)
    {

        longFilter = "wintype=3";
        longFilter = longFilter + " and filterstat= '" + windowObj.filterstat + "'";
        longFilter = longFilter + " and r_starttime = '" +  windowObj.r_starttime + "'";
        longFilter = longFilter + " and r_endtime = '" + windowObj.r_endtime + "'";
        longFilter = longFilter + " and timezone = '" + windowObj.timezone + "'";
        longFilter = longFilter + " and daysofmonth = '" + windowObj.daysofmonth + "'";
        dup = getbyfilter("mm_windows", longFilter, false);

        if (length (dup) > 0)
        {
            boo = true;

        }

    }


    if(windowObj.wintype = 4)
    {
        longFilter = "wintype=4";
        longFilter = longFilter + " and filterstat= '" + windowObj.filterstat + "'";
        longFilter = longFilter + " and r_starttime = '" +  windowObj.r_starttime + "'";
        longFilter = longFilter + " and r_endtime = '" + windowObj.r_endtime + "'";
        longFilter = longFilter + " and timezone = '" + windowObj.timezone + "'";
        longFilter = longFilter + " and nweekdayofmonth = '" + windowObj.nweekdayofmonth + "'";
        dup = getbyfilter("mm_windows", longFilter, false);

        if (length (dup) > 0)
        {
            boo = true;

        }

    }

}









//////////////// Convert start and end times to gmt Epoch time 

//create a calendar
log(3, "creating a calendar for time zone " + @timezone);

//create a time zone object
timeZone=javacall("java.util.TimeZone", null, "getTimeZone",{@timezone});

//create a calendar object
calendar = javacall("java.util.Calendar", null, "getInstance", {});
/*
newCalendar = javacall(null, calendar, "toString", {});
log(3, "new calendar is " + newCalendar);
*/



//tweak calendar to reflect given time zone
javacall(null, calendar, "setTimeZone", {timeZone});
/*
TZCalendar = javacall(null, calendar, "toString", {});
log(3, "after changing time zone, calendar is " + TZCalendar);
*/



/////////// start time
/* replace this
onetime_start = @onetstart + " " + @timezone;
onetime_start = ParseDate(onetime_start, "yyyy-MM-dd HH:mm:ss z");
*/


getEpoch(@onetstart, calendar, onetime_start);


/*
if (@dst == 1) //subtracting an hour if dst
{
    log(3, "subtracting an hour for DST");
    onetime_start = onetime_start - (1 * 60 * 60); //convert hour to seconds
}
*/


startCalendar = javacall(null, calendar, "toString", {});
log(3, "start time calendar is " + startCalendar);
Log(3, "epoch start time from browser: [" + onetime_start + "]");




/////////end time

/* replace this
onetime_end = @onetend + " " + @timezone;
onetime_end = ParseDate(onetime_end, "yyyy-MM-dd HH:mm:ss z");
*/

getEpoch(@onetend, calendar, onetime_end);


/*
if (@dst == 1) //subtracting an hour if dst
{
    log(3, "subtracting an hour for DST");
    onetime_end = onetime_end - (1 * 60 * 60); //convert hour to seconds

}
*/


endCalendar = javacall(null, calendar, "toString", {});
log(3, "end time calendar is " + endCalendar);

Log(3, "epoch end time from browser: [" + onetime_end + "]");






///////////convert start and end times to strings for storage (why did he use strings?)
onetime_start = String(onetime_start);
onetime_end = String(onetime_end);






/* #########################################

Building event filter to use in object server queries

##########################################*/

/////First do some checks for blank values and substitute the string "ANY"


// Node - t1
If(@t1 == '')
{
    nodeval = 'ANY';
}


Else
{
    nodeval = @t1;
}


// AlertGroup - t2
If(@t2 == '')
{
    agval = 'ANY';
}

Else
{
    agval = @t2;
}


// AlertKey - t3
If(@t3 == '')
{
    akval = 'ANY';
}

Else
{
    akval = @t3;
}


// Location - t4
If (@t4 == '')
{
    locval = 'ANY';
}

Else
{
    locval = @t4;
}



////////////////////////// Now build the filter statement

myfilter = "";

//NODE
If((@t1 != '') && (@t1 != NULL))
{
    If(@loeq1 == "equal")
    {
        myfilter="(Node=\"" + @t1 + "\")";
    }
    ElseIf(@loeq1 == "like")
    {
        myfilter="(Node like \".*" + @t1 + ".*\")";
    }
}

//ALERTGROUP
If((@t2 != '') && (@t2 != NULL))
{
     If(myfilter != '')
    {
        myfilter = myfilter + " AND ";
    }

     If(@loeq2 == "equal")
    {
        myfilter = myfilter + "(AlertGroup=\"" + @t2 + "\")";
    }

    ElseIf(@loeq2 == "like")
    {
        myfilter = myfilter + "(AlertGroup like \".*" + @t2 + ".*\")";
    }
}

//ALERTKEY
If((@t3 != '') && (@t3 != NULL))
{ 
    If(myfilter != '')
    {
        myfilter = myfilter + " AND ";
    }

    If(@loeq3 == "equal")
    {
        myfilter = myfilter + "(AlertKey=\"" + @t3 + "\")";
    }

    ElseIf(@loeq3 == "like")
    {
        myfilter= myfilter + "(AlertKey like \".*" + @t3 + ".*\")";
    }
}

//LOCATION
If((@t4 != '') && (@t4 != NULL))
{ 
    If(myfilter != '')
    {
        myfilter = myfilter + " AND ";
    }

    If(@loeq4 == "equal")
    {
        myfilter=myfilter + "(Location=\"" + @t4 + "\")";
    }

    ElseIf(@loeq4 == "like")
    {
    myfilter = myfilter + "(Location like \".*" + @t4 + ".*\")";
    }
}

Log(3, "myfilter: " + myfilter);


/*#####################################

Now Perform insert

###################################*/

//check for dups
window = newobject();
window.wintype = 1;
window.filterstat = myfilter;
window.eot_starttime = onetime_start;
window.eot_endtime = onetime_end;
window.timezone = @timezone;

Opview_Add1TWin.jMadrox (window, bool);
//log("bool is " + bool);
if (bool == false)
{
    //perform insert
    myinsert = "insert into mm_windows (filterstat,wintype,ot_starttime,eot_starttime,ot_endtime,eot_endtime, timezone)";
    myinsert = myinsert + " values ('" + myfilter + "',1,'" + @onetstart + "','" + onetime_start + "','" + @onetend + "','" + onetime_end + "', '";
    //myinsert = myinsert + @timezone + " " + dstString + "')";
    myinsert = myinsert + @timezone + "')";
    Log(3, "myinsert: " + myinsert);
    DirectSQL('ReportsHSQLDB',myinsert,false);
}
