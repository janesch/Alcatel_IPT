/********************************************************* {COPYRIGHT-TOP-RM} ***
* Licensed Materials - Property of IBM
* "Restricted Materials of IBM"
*
* 5724-S43
* (C) Copyright IBM Corp. 2009
*
* US Government Users Restricted Rights - Use, duplication, or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************* {COPYRIGHT-END-RM} **/
/* ####################################################

code for displaying recurring nth Day of Week in Month windows

##################################################*/




/* #######FUNCTIONS#########################*/

function getNthArray(nthString, nthArray)
{
	log(2, "function getNthArray");
    log(3, "nthString = " + nthString);

    nthArray = {};
    nthStringArray  = split(nthString, "|");
    log(3, "nthStringArray = " + nthStringArray);

    n = 0;
    while(n < length(nthStringArray))
    {
        if(nthStringArray[n] != NULL)
        {
            nthArray = nthArray + nthStringArray[n];
        }
        n = n + 1;
    }

    log(2, "nthArray is = " + nthArray);

}



function inArray(x, theArray, boo)
{
    log(2, "function inArray");
    log(3, "target is " + x);
    log(3, "array is " + theArray);

    boo = FALSE;
    n = 0;
    while (n < length(theArray))
    {
        if(x == theArray[n])
        {
            boo = TRUE;
        }        

        n = n + 1;
    }

    log(3, "return is " + boo);
}




function transformHHMMSS(hhmmss, intArray)
{
    log(2, "function transformHHMMSS");
    log(3, "hhmmss is " + hhmmss);
    
    tempArray = split(hhmmss, ":");
    intArray = {};

    n = 0;
    while (n < length(tempArray))
    {
        intArray = intArray + int(tempArray[n]);
        n = n + 1;
    }
    
    log(3, "intArray is " + intArray);
}



function mergeNTH(nth, dow, mergedNTH)
{
    if(nth == 1)
    {
        mergedNTH = "first" + dow;
    }

    if(nth == 2)
    {
        mergedNTH = "second" + dow;

    }

    if(nth == 3)
    {
        mergedNTH = "third" + dow;

    }

    if(nth == 4)
    {
        mergedNTH = "fourth" + dow;

    }

    if(nth == 5)
    {
        mergedNTH = "fifth" + dow;

    }


}


/*############################################*/





/* ####### Deletes #########################*/

//code for handling deletes
If(@mwid != NULL)
{ 
    Opview_openwins.deleteWindow(@mwid);
}

/*############################################*/





/* ########## SETUP ##########*/

//get UTC
UTC = getdate();
log(2, "Current epoch gmt time is : " + UTC);


//start of html
htmltext1 = "<table><tr><th>Suppression Filter</th><th>Nth Day of Week in Month</th><th>Start Time</th><th>End Time</th><th>Time Zone</th><th>Status</th><th>Delete</th></tr>";


//get all the windows in the DB
recnth = DirectSQL('ReportsHSQLDB',"select * from mm_windows where wintype=4",false);






/* ########################################################

loop through the windows and create the appropriate html

############################################################*/

if(length(recnth) > 0)
{
    log(3, "found some nth windows");
    winCount = 0;
    while (winCount < length(recnth))
    {


        //getting display value for time zone
        Opview_onetwins.getTZDisplayValue (recnth[winCount].timezone, displayTZ);

        //getting the display value for the filterstat
        Opview_openwins.shineFilter(recnth[winCount].filterstat, displayFilterstat);

        //getting display value for the DoWiM
        Opview_openwins.shineDoWiM(recnth[winCount].nweekdayofmonth, displayDoWiM);

        //////get the current time in that time zone
        MWM.newCalendar(recnth[winCount].timezone, UTC, calendar);


        //get nth
        MWM.getNTH(recnth[winCount].timezone, calendar, NTH);
        //get DoW
        MWM.getDOW(recdow[winCount].timezone, calendar, DOW);
        //munge them together to match DB
        mergeNTH(NTH, DOW, mergedNTH);


        //turn the | seperated nth values from the DB into an array
        getNthArray(recnth[winCount].nweekdayofmonth, nthArray);

        //determine if the current nth is in the array
        inArray(mergedNTH, nthArray, NTHboo);

        if (NTHboo) //TRUE...today is one of the nth days
        {
            log(3, "nth day of week matches");
            ///////////////get clock times for comparison
        
            //get current HHMMSS
            MWM.getHHMMSS(calendar, HHMMSSstring);

            //convert to ints for comparisons
            transformHHMMSS(HHMMSSstring, currentClockTime);
            transformHHMMSS(recnth[winCount].r_starttime, startClockTime);
            transformHHMMSS(recnth[winCount].r_endtime, endClockTime);
        

            //convert to seconds for comparison
            // [0] = hour, [1] = minutes, [2] = seconds
            currentSeconds = (currentClockTime[0] * 3600) + (currentClockTime[1] * 60) + (currentClockTime[2]);
            startSeconds = (startClockTime[0] * 3600) + (startClockTime[1] * 60) + (startClockTime[2]);
            endSeconds = (endClockTime[0] * 3600) + (endClockTime[1] * 60) + (endClockTime[2]);



            if( (currentSeconds >= startSeconds) and (currentSeconds < endSeconds) )
            {
                log(3, "time matches");
                htmltext1 = htmltext1 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoWiM + "</td>";
                htmltext1 = htmltext1 + "<td>" + recnth[winCount].r_starttime + "</td><td>" + recnth[winCount].r_endtime + "</td>";
                htmltext1 = htmltext1 + "<td>" + displayTZ + "</td>";
                htmltext1 = htmltext1 + "<td align='center'><img src='../assets/installed/mwms/activestat.jpg' border=0 /></td>";
            }

            else
            {
                log(3, "time doesn't match");
                htmltext1 = htmltext1 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoWiM + "</td>";
                htmltext1 = htmltext1 + "<td>" + recnth[winCount].r_starttime + "</td><td>" + recnth[winCount].r_endtime + "</td>";
                htmltext1 = htmltext1 + "<td>" + displayTZ + "</td>";
                htmltext1 = htmltext1 + "<td align='center'><img src='../assets/installed/mwms/inactivestat.jpg' border=0 /></td>";
            }





        }

        else
        {
            log(3, "day of week doesn't match");
            htmltext1 = htmltext1 + "<tr><td>" + displayFilterstat + "</td><td>" + displayDoWiM + "</td>";
            htmltext1 = htmltext1 + "<td>" + recnth[winCount].r_starttime + "</td><td>" + recnth[winCount].r_endtime + "</td>";
            htmltext1 = htmltext1 + "<td>" + displayTZ + "</td>";
            htmltext1 = htmltext1 + "<td align='center'><img src='../assets/installed/mwms/inactivestat.jpg' border=0 /></td>";

        }
        htmltext1 = htmltext1 + "<td align='center'><a href='NCICLUSTER-rwdomwins.html?mwid=" + recnth[winCount].mwid + "'><img src='../assets/installed/mwms/delete.jpg' border=0 alt='Delete Window'/></a></td></tr>";
        winCount = winCount + 1;
    }
}


else
{
    //no NTH windows
    htmltext1 = htmltext1 + "<tr><td>There are currently no recurring nth Weekday of Month windows.</td></tr>";

}



htmltext1 = htmltext1 + "</table>";
Log(3, "htmltext1: " + htmltext1);

