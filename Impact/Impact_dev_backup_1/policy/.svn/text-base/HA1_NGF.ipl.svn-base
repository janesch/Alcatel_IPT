/********************************************************* {COPYRIGHT-TOP-RM} ***
* Licensed Materials - Property of IBM
* "Restricted Materials of IBM"
*
* 5724-S43
* (C) Copyright IBM Corp. 2009
*
* US Government Users Restricted Rights - Use, duplication, or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************* {COPYRIGHT-END-RM} **/
/*
 * Functions for taking an IPL object created using the IPLtoXML functions, converting
 * the IPL object to XML, saving the XML to file, and pushing the XML to ngf_api
 */

function GetEnv(ENV){
	ENV = newobject();


	// how to run external/remote processes.  Only remote works with waapi/ngf on windows
	ENV.howToCall="remote"; 	// options are local, remote
	//ENV.howToCall="local";  

	//location of API CLI
	ENV.ngfapiHome="/opt/ibm/netcool/bin/ngf_api";
	//ENV.ngfapiHome="C:\\progra~1\\ibm\\netcool\\bin\\ngf_api.bat";	//use 8.3 file names for Windows

	//where the temporary xml files should be stored
	ENV.integrationHome="/opt/ibm/netcool/impact/integrations/webtop";
	//ENV.integrationHome="C:\\progra~1\\ibm\\netcool\\impact\\integr~1\\webtop";		//use 8.3 file names for Windows

	//remove xml files after they have been run?
	ENV.saveXML=TRUE;  //options are TRUE or FALSE

	//Unix or Microsoft platform
	ENV.platform="unix";  //options or unix or ms
	//ENV.platform="ms";  //windows-style pathing

	//file extension for xml files //example webtop.xml, ngf.xml, psml
	ENV.extension = "ngf.xml";	//this will be ignored when the platform is windows 



	/* see the Policy Reference Guide for information on setting up SSH command/response */
	/////linux example

	ENV.hostname="spiderman";
	ENV.username="netcool";
	ENV.sshPort=22;
	ENV.expectList={"[netcool@spiderman ~]$ "};

	ENV.UserCredentials=newobject();
	ENV.UserCredentials.Password=decrypt("7E6C7364EFD7CD69"); 			//run nci_crypt on password
	ENV.UserCredentials.PassPhrase=decrypt("F1B254C40C873DC64E51BAAAA7644CB6"); 	//run nci_crypt on passphrase
	ENV.UserCredentials.KeyFile="/opt/ibm/netcool/impact/integrations/ssh/id_rsa";

	ENV.Options=newobject();
	ENV.Options.Service="ssh";
	ENV.Options.AutoInitiate=TRUE;
	ENV.Options.CmdTerminator="\n";
	ENV.Options.InitialPrompt="[netcool@spiderman ~]$ ";

/*
	/////openSSH on windows example
	ENV.hostname="localhost";
	ENV.username="Administrator";
	ENV.sshPort=22;
	ENV.expectList={"C:\Documents and Settings\Administrator>"};

	ENV.UserCredentials=newobject();
	//ENV.UserCredentials.Password=decrypt("7E6C7364EFD7CD69"); 			//run nci_crypt on password
	ENV.UserCredentials.Password="netcool";
	//ENV.UserCredentials.PassPhrase=decrypt("F1B254C40C873DC64E51BAAAA7644CB6"); 	//run nci_crypt on passphrase
	//ENV.UserCredentials.KeyFile="/opt/ibm/netcool/impact/integrations/ssh/id_rsa";

	ENV.Options=newobject();
	ENV.Options.Service="ssh";
	ENV.Options.AutoInitiate=TRUE;
	ENV.Options.CmdTerminator="\n";
	ENV.Options.InitialPrompt="C:\Documents and Settings\Administrator>";
*/

	/* //logging of ENV values */
	//log(ENV.waapiHome);
	//log(ENV.integrationHome);


}


function createXMLFile(OMNI){
	//generate filename
	log("generating file name");
	destinationDir=OMNI.ENV.integrationHome;
	extension=OMNI.ENV.extension;
	platform=OMNI.ENV.platform;
	UTIL.generatelUniqueFileName(OMNI.fullFileName, destinationDir, extension, platform);
	log("file name is " + OMNI.fullFileName);



	//create file local
	if (OMNI.ENV.howToCall="local"){
		log("creating local file");
		log("platform is: " + OMNI.ENV.platform);

		if(OMNI.ENV.platform=="unix"){
		UTIL.createLocalFile(OMNI.fullFileName, OMNI.text, cmdOutput);
		}

		if(OMNI.ENV.platform=="ms"){
		log("*************use ssh/remote with Windows*******************");
		//UTIL.cleanTextForWinEcho(OMNI.text);
		//UTIL.createLocalWinFile(OMNI.fullFileName, OMNI.text, cmdOutput);
		}
		//log(cmdOutput);
	}





	//create file remote
	if (OMNI.ENV.howToCall=="remote"){
		log("creating remote file");

		//clean file for echo
		if(OMNI.ENV.platform=="unix"){
			UTIL.cleanTextForEcho(OMNI.text);
		}

		if(OMNI.ENV.platform=="ms"){
			UTIL.cleanTextForWinEcho(OMNI.text);
		}

		UTIL.createRemoteFile(OMNI.fullFileName, OMNI.text, OMNI.ENV.expectList, OMNI.sshSession, cmdOutput);

	}

}






function runXMLFile(OMNI){
	//local
	if (OMNI.ENV.howToCall="local"){
		log("pushing XML to local API");
		pathToAPI=OMNI.ENV.ngfapiHome;  ////DIFF from webtop policy
		filePointer=NULL;  /////DIFF from webtop policy
		targetFile=OMNI.fullFileName;
		UTIL.callLocalCLI_API(pathToAPI, filePointer, targetFile, OMNI.apiOutput);
		log(OMNI.apiOutput);
	}

	//remote
	if (OMNI.ENV.howToCall="remote"){
		log("pushing XML to remote API");
		pathToAPI=OMNI.ENV.ngfapiHome; /////DIFF from webtop policy
		filePointer=""; /////DIFF from webtop policy
		targetFile=OMNI.fullFileName;
		sshExpectList=OMNI.ENV.expectList;
		sshSession=OMNI.sshSession;
		UTIL.callRemoteCLI_API(pathToAPI, filePointer, targetFile, sshExpectList, sshSession, OMNI.apiOutput);
		log(OMNI.apiOutput);
	}
}






function deleteXMLFile(OMNI){
	//local
	if (OMNI.ENV.howToCall="local"){
		log("deleting local xml file");
		UTIL.deleteLocalFile(OMNI.fullFileName, cmdOutput);
		//log(cmdOutput);
	}


	//remote
	if (OMNI.ENV.howToCall=="remote"){
		log("deleting remote xml file");

		if(OMNI.ENV.platform=="unix"){
			UTIL.deleteRemoteFile(OMNI.fullFileName, OMNI.ENV.expectList, OMNI.sshSession, cmdOutput);
			//log(cmdOutput);
		}

		if(OMNI.ENV.platform=="ms"){
			UTIL.deleteRemoteWinFile(OMNI.fullFileName, OMNI.ENV.expectList, OMNI.sshSession, cmdOutput);
			//log(cmdOutput);
		}


	}
}






//DIFF from webtop policy-- name used for object variable

function Provision(projectObject){
	//object to pass between functions
	OMNI=newobject();


	// Generate the XML object to send to the API
	log("generating XML string for ngf_api");
	IPLtoXML.generateXML(projectObject, OMNI.text);
	log("\n" + OMNI.text);


	//Get ENV details
	log("getting ENV");
	GetEnv(OMNI.ENV);



	//OPTIONAL create sshSession

	If (OMNI.ENV.howToCall="remote"){
		log("generating SSH session");
		UTIL.createSSHSession(OMNI.sshSession, OMNI.ENV);

	}




	//create xml file
	createXMLFile(OMNI);




	//push xml file to api
	runXMLFile(OMNI);



	//OPTIONAL delete xml file
	if(OMNI.ENV.saveXML=FALSE){
		log("deleting XML file");
		deleteXMLFile(OMNI);
	}


	//OPTIONAL end sshSession

	If (OMNI.ENV.howToCall="remote"){
		log("ending SSH session");
		UTIL.endSSHSession(OMNI.sshSession);

	}



	projectObject.NGFAPI_OUTPUT=OMNI.apiOutput; //DIFF from webtop policy



}





//////////////////////////////////////////////////testing
//create new user

/*
ngfProject=newobject();
ngfProject.XMLElementType="project";
ngfProject.name="createExampleUser";
ngfProject.default="main";
ngfProject.basedir=".";
ngfProject.a_taskdef1=newobject();
	ngfProject.a_taskdef1.XMLElementType="taskdef";
	ngfProject.a_taskdef1.name="usertask";
	ngfProject.a_taskdef1.classpath="%CLASSPATH%";
	ngfProject.a_taskdef1.classname="com.micromuse.ncgf.security.anttask.UserAntTask";
ngfProject.b_property1=newobject();
	ngfProject.b_property1.XMLElementType="property";
	ngfProject.b_property1.name="username";
	ngfProject.b_property1.value="admin";
ngfProject.b_property2=newobject();
	ngfProject.b_property2.XMLElementType="property";
	ngfProject.b_property2.name="password";
	ngfProject.b_property2.value="netcool";
ngfProject.b_property3=newobject();
	ngfProject.b_property3.XMLElementType="property";
	ngfProject.b_property3.name="server";
	ngfProject.b_property3.value="localhost:8080";
ngfProject.c_target1=newobject();
	ngfProject.c_target1.XMLElementType="target";
	ngfProject.c_target1.name="main";
	ngfProject.c_target1.description="creates an example user in ngf";

	ngfProject.c_target1.usertask1=newobject();
		ngfProject.c_target1.usertask1.XMLElementType="usertask";
		ngfProject.c_target1.usertask1.action="create"; //create, update, or delete
		ngfProject.c_target1.usertask1.accountusername="userFromImpact";
		ngfProject.c_target1.usertask1.accountpassword="netcool";
		ngfProject.c_target1.usertask1.firstname="Impact";
		ngfProject.c_target1.usertask1.lastname="User";
		ngfProject.c_target1.usertask1.model="true";
		ngfProject.c_target1.usertask1.verbose="true";
		ngfProject.c_target1.usertask1.username="${username}";
		ngfProject.c_target1.usertask1.password="${password}";
		ngfProject.c_target1.usertask1.server="${server}";



//STACK is always required before function call that makes use of IPLtoXML
STACK=NewJavaObject("java.util.Stack", {});

Provision(ngfProject);

log(ngfProject.NGFAPI_OUTPUT);
*/
